 BEGIN_PROVIDER [ double precision, fock_diag_tmp_, (2,mo_tot_num+1,Nproc) ]
&BEGIN_PROVIDER [ integer, current_generator_, (Nproc) ]
&BEGIN_PROVIDER [ double precision, a_h_i, (N_det, Nproc) ]
&BEGIN_PROVIDER [ double precision, a_s2_i, (N_det, Nproc) ]
  implicit none
  current_generator_(:) = 0
  a_h_i = 0d0
  a_s2_i = 0d0
 END_PROVIDER



subroutine dress_with_alpha_buffer(Nstates,Ndet,Nint,delta_ij_loc, i_gen, minilist, det_minilist, n_minilist, alpha, iproc)
 use bitmasks
 implicit none
  BEGIN_DOC
  !delta_ij_loc(:,:,1) : dressing column for H
  !delta_ij_loc(:,:,2) : dressing column for S2
  !i_gen : generator index in psi_det_generators
  !minilist : indices of determinants connected to alpha ( in psi_det_sorted )
  !n_minilist : size of minilist
  !alpha : alpha determinant
  END_DOC
  integer, intent(in)             :: Nint, Ndet, Nstates, n_minilist, iproc, i_gen
  integer(bit_kind), intent(in)   :: alpha(Nint,2), det_minilist(Nint, 2, n_minilist)
  integer,intent(in)              :: minilist(n_minilist)
  double precision, intent(inout) :: delta_ij_loc(Nstates,N_det,2)
  double precision :: haa, hij, sij
  double precision, external :: diag_H_mat_elem_fock
  integer                        :: i,j,k,l,m, l_sd
  double precision :: hdress, sdress
  double precision :: de, a_h_psi(Nstates), c_alpha
  integer :: det_CAS, number_of_holes, number_of_particles 
  logical :: in_CAS

  a_h_psi = 0.d0
  
! if (is_a_two_holes_two_particles(alpha) .EQV. .False.) return
  if(current_generator_(iproc) /= i_gen) then
    current_generator_(iproc) = i_gen
    call build_fock_tmp(fock_diag_tmp_(1,1,iproc),psi_det_generators(1,1,i_gen),N_int)
  end if

  !je verifie que alpha est une 2h2p
  logical :: is_a_two_holes_two_particles
  if (is_a_two_holes_two_particles(alpha) .EQV. .TRUE.) then
    !print*,'alpha est une 2h2p'

    haa = diag_H_mat_elem_fock(psi_det_generators(1,1,i_gen),alpha,fock_diag_tmp_(1,1,iproc),N_int)

    do l_sd=1,n_minilist
      call i_h_j_s2(alpha,det_minilist(1,1,l_sd),N_int,hij, sij)
      a_h_i(l_sd, iproc) = hij
      a_s2_i(l_sd, iproc) = sij
      in_CAS = (( number_of_holes(det_minilist(1,1,l_sd)) .EQ. 0) .and. (number_of_particles(det_minilist(1,1,l_sd)) .EQ. 0 ))
      if (in_CAS) then
        det_CAS = l_sd
        !print*,'Numero_det du cas dans minilist = ', det_CAS
      end if
      do i=1,Nstates
        a_h_psi(i) += hij * psi_coef(minilist(l_sd), i)
      end do
    end do


    do i=1,Nstates
      de = E0_denominator(i) - haa
      if(DABS(de) < 1D-5) cycle
        c_alpha = a_h_psi(i) / de
        do l_sd=1,n_minilist
          hdress = c_alpha * a_h_i(l_sd, iproc)
          sdress = c_alpha * a_s2_i(l_sd, iproc)
          delta_ij_loc(i, minilist(l_sd), 1) += hdress
          delta_ij_loc(i, minilist(l_sd), 2) += sdress
          !je cherche l'unique det du cas connecte avec alpha 
        end do
        return
        !!!!!EPV hunter operation!!!!!
        !J'ordonne les l_sd determinants connecte a alpha:
        integer              :: minilist_order(n_minilist), minilist_temp(n_minilist)
        do l_sd=1,n_minilist
          minilist_temp(l_sd) = minilist(l_sd)
          minilist_order(l_sd) = l_sd
        enddo

!!!!!!!!!!!!!!!!!!!!!!!Folie du print!!!!!!!!!!!!!!!!!     
     !test ordre deter
!     print*,'n_minilist = ', n_minilist
!     print*,'N_det = ', Ndet
!     print*,'Avant'
!     do l_sd = 1, n_minilist
!     print*,l_sd,minilist_temp(l_sd),minilist_order(l_sd)
!     enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!       call isort(minilist_temp,minilist_order,n_minilist)
     
!!!!!!!!!!!!!!!!!!!!!!!Folie du print!!!!!!!!!!!!!!!!!
!     print*,'Apres'
!     do l_sd = 1, n_minilist
!     print*,l_sd,minilist_temp(l_sd),minilist_order(l_sd)
!     enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        integer :: indi, indi_c, degree
        indi_c = 1 
       !do indi=1,Ndet
       !  !Je verifie que le det n'est pas connecte avec alpha (indi<  ):
       !  if (indi < minilist_temp(indi_c)) then
       !    !je verifie que le degree d'excitaion entre det et alpha est superieur a 3 
       !    call get_excitation_degree(alpha, psi_det(1,1,indi), degree, Nint)
       !      if (degree > 3) then     
       !        !Si oui, je check que <i|h|I> (I det du CAS qui a servi a faire alpha) est strictement inferieur a 3
       !        call get_excitation_degree(det_minilist(1,1,det_CAS), psi_det(1,1,indi), degree, Nint)
       !        if (degree <= 2) then
       !          !print*,'degree', degree
       !          !je rajoute 
       !          delta_ij_loc(i, indi, 1) +=  a_h_i(det_CAS, iproc) * a_h_i(det_CAS, iproc) * psi_coef(indi, i) / de
       !          delta_ij_loc(i, indi, 2) +=  a_s2_i(det_CAS, iproc) * a_h_i(det_CAS, iproc) * psi_coef(indi, i) / de 
       !          cycle  
       !        else
       !          cycle 
       !        end if
       !      else
       !        cycle
       !      end if
       !  else if (indi .eq. minilist_temp(indi_c)) then
       !    !Si non, rien, j'incremente et jme casse
       !    indi_c += 1
       !    cycle
       !  end if
       !enddo
    end do
    !pause
  
  END if
end subroutine


BEGIN_PROVIDER [ logical, initialize_E0_denominator ]
    implicit none
    BEGIN_DOC
    ! If true, initialize pt2_E0_denominator
    END_DOC
    initialize_E0_denominator = .True.
END_PROVIDER


BEGIN_PROVIDER [ double precision, E0_denominator, (N_states) ]
  implicit none
  BEGIN_DOC
  ! E0 in the denominator of the PT2
  END_DOC
  if (initialize_E0_denominator) then
   if (h0_type == "EN") then
     E0_denominator(1:N_states) = psi_energy(1:N_states)
   else if (h0_type == "Barycentric") then
     E0_denominator(1:N_states) = barycentric_electronic_energy(1:N_states)
   else
     print *,  h0_type, ' not implemented'
     stop
   endif
  else
    E0_denominator = -huge(1.d0)
  endif
END_PROVIDER


